#!/usr/bin/python3

import os as pyos
import sys, getopt, subprocess

# Auto gen a justfile?

cmd_str = "-i <img> -a <arch> -o <os-version> (-l <true/false> : For node/rustnode only)"
templates_root = "./templates/"
tag_root = "harmlesstech/"
fillers = {
    "rust": {
        "alpine": {
            "amd64": [("CFLAGS", ""), ("RUST_TARGET", "x86_64-unknown-linux-musl")],
            "arm64": [("CFLAGS", "export CFLAGS='-mno-outline-atomics'"), ("RUST_TARGET", "aarch64-unknown-linux-musl")]
        },
        "debian": {
            "amd64": [("RUST_TARGET", "x86_64-unknown-linux-gnu")],
            "arm64": [("RUST_TARGET", "aarch64-unknown-linux-gnu")]
        }
    },
    "node": {
        "alpine": {
            "amd64": [],
            "arm64": []
        },
        "debian": {
            "amd64": [],
            "arm64": []
        }
    },
    "rustnode": {
        "alpine": {
            "amd64": [],
            "arm64": []
        },
        "debian": {
            "amd64": [],
            "arm64": []
        }
    }
}

class Possible:
    img = ["rust", "node", "rustnode"]
    arch = ["amd64", "arm64"]
    os = [("alpine", ["latest", "3.16"]), ("alpine", ["3.15"]), ("alpine", ["3.14"]),
          ("debian", ["latest", "bullseye"]), ("debian", ["bullseye-slim"]), ("debian", ["buster"]), ("debian", ["buster-slim"]),
          ("ubuntu", ["latest", "jammy"]), ("ubuntu", ["focal"])
         ]


# Verify that the arguments inputted are valid.
# Returns a os_version list.
def verify(img, arch, os, os_version, lts):
    if img not in Possible.img:
        print("img is not a valid img. Valid Args: " + str(Possible.img))
        sys.exit(1)
    if arch not in Possible.arch:
        print("arch is not a valid arch. Valid Args: " + str(Possible.arch))
        sys.exit(1)
    if lts and img == "rust":
        print("lts cannot be 'true' for the img rust.")
        sys.exit(1)
    
    for i in Possible.os:
        if os == i[0] and os_version in i[1]:
            return i[1]

    print("os-version is not a valid os-version. Valid Args: " + str(Possible.os))
    sys.exit(1)


# Generates a Dockerfile in the current directory.
def gen_dockerfile(img, arch, os, os_version, lts, rustc_version, node_version):
    template_dir = img
    aka = os
    if img == "rustnode":
        template_dir = "node"
    if aka == "ubuntu":
        aka = "debian"

    with open(templates_root + template_dir + "/Dockerfile." + aka) as file:
        data = file.read()

    # Default Templates
    data = data.replace("%%IMG%%", img)
    data = data.replace("%%ARCH%%", arch)
    data = data.replace("%%OS%%", os)
    data = data.replace("%%OS_VERSION%%", os_version[0])
    data = data.replace("%%LTS%%", "lts" if lts else "latest")
    data = data.replace("%%RUSTC_VERSION%%", rustc_version)
    data = data.replace("%%NODE_VERSION%%", node_version)

    # Apply Filler Templating
    t_strs = fillers[img][aka][arch]
    for t in t_strs:
        data = data.replace("%%" + t[0] + "%%", t[1])

    # Special stuff due to rustnode and node sharing templates.
    if img != "rust":
        source = os + ":" + os_version[0]
        if img == "rustnode":
            source = tag_root + "rust:" + rustc_version + "-" + os + "-" + os_version[0]
        data = data.replace("%%SOURCE%%", source)

    #TODO: Generating metadata. # Generated by gen.py with options ...
    with open("./Dockerfile", "w") as file:
        file.write(data)
        file.close()


# Generate a CSV of tags.
# TAG: ROOT/IMG:<RUST_VERSION>-<NODE_VERSION>-(LTS)-OS-OS_VERSION
def gen_tags(img, _arch, os, os_version, lts, rustc_version, node_version):
    rtag = tag_root + img + ":"
    ltags = []
    for v in os_version:
        tags = []
        tag = os + "-" + v
        if not lts:
            tags = [tag]
            if img == "rust" or img == "rustnode":
                tags.append(rustc_version + "-" + tags[0])
            if img == "node" or img == "rustnode":
                tags.append(node_version + "-" + tags[0])
            if img == "rustnode":
                tags.append(rustc_version + "-" + node_version + "-" + tags[0])
        else:
            if img == "node" or img == "rustnode":
                tags.append(node_version + "-" + tag)
                tags.append("lts-" + tag)
            if img == "rustnode":
                tags.append(rustc_version + "-" + node_version + "-" + tag)
                tags.append(rustc_version + "-lts-" + tag)
        
        for t in tags:
            ltags.append(t)
    
    ltags = map(lambda x: rtag + x, ltags)
    out = ",".join(ltags)
    print(out)


def main(argv):
    img = None
    arch = None
    os = None
    os_version = None
    lts = False

    # Options processing and checking
    try:
        opts, _args = getopt.getopt(argv,"i:a:o:l:",["img=", "arch=", "os=", "lts="])
    except getopt.GetoptError:
      print(cmd_str)
      sys.exit(1)

    for opt, arg in opts:
        if opt in ("-i", "--img"):
            img = arg
        elif opt in ("-a", "--arch"):
            arch = arg
        elif opt in ("-o", "--os"):
            x = arg.index("-")
            os = arg[0:x]
            os_version = arg[x + 1:]
        elif opt in ("-l", "--lts"):
            lts = arg == "true"

    if img is None or arch is None or os is None or os_version is None:
        print(cmd_str)
        sys.exit(1)
    
    os_version = verify(img, arch, os, os_version, lts)

    # Getting rust and/or node version
    rustc_version = pyos.getenv("RUSTC_VERSION")
    node_version = pyos.getenv("NODE_VERSION")

    if (img == "rust" or img == "rustnode") and rustc_version is None: # Get rustc version from rustc on path
        result = subprocess.run(["rustc", "--version"], capture_output=True, text=True, check=True)
        s = result.stdout.index("rustc ") + 6
        e = result.stdout.rindex("(") - 1
        rustc_version = result.stdout[s:e]

    if (img == "node" or img == "rustnode") and node_version is None: # Get node version from node on path
        result = subprocess.run(["node", "--version"], capture_output=True, text=True, check=True)
        node_version = result.stdout[1:]
        node_version = node_version.strip()

    if rustc_version is None:
        rustc_version = ""
    if node_version is None:
        node_version = ""

    # Make Dockerfile
    gen_dockerfile(img, arch, os, os_version, lts, rustc_version, node_version)

    # Generate CSV of tags
    gen_tags(img, arch, os, os_version, lts, rustc_version, node_version)


if __name__ == "__main__":
   main(sys.argv[1:])
